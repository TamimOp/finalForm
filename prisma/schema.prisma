datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum FormRole {
  Creator
  Editor
  Viewer
}

model User {
  id          Int              @id @default(autoincrement())
  email       String           @unique
  name        String?
  role        Role
  templates   Template[]
  forms       Form[]
  permissions FormPermission[]
  answers     Answers[]
  password    String
  lastLogin   DateTime?        @default(now())
  createdAt   DateTime         @default(now())
}

model Template {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  authorId    Int
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  fid         Int
  form        Form       @relation(fields: [fid], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comments[]
  tags        Tags[]
}

model Like {
  id       Int      @id @default(autoincrement())
  tid      Int
  template Template @relation(fields: [tid], references: [id], onDelete: Cascade)
  value    Boolean
}

model Comments {
  id       Int      @id @default(autoincrement())
  tid      Int
  template Template @relation(fields: [tid], references: [id], onDelete: Cascade)
  text     String
}

model Tags {
  id       Int      @id @default(autoincrement())
  tid      Int
  template Template @relation(fields: [tid], references: [id], onDelete: Cascade)
  text     String
}

model Form {
  id          Int              @id @default(autoincrement())
  uid         Int
  title       String
  description String
  image       String?
  user        User             @relation(fields: [uid], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  elements    Element[]
  permissions FormPermission[]
  templates   Template[]
  answers     Answers[]
}

model Element {
  id         Int       @id @default(autoincrement())
  type       Int
  index      Int
  fid        Int
  question   String
  form       Form      @relation(fields: [fid], references: [id], onDelete: Cascade)
  required   Boolean   @default(false)
  fieldCount Int
  text1      String?
  text2      String?
  text3      String?
  text4      String?
  Answers    Answers[]
}

model Answers {
  id        Int     @id @default(autoincrement())
  fid       Int
  uid       Int
  eid       Int
  selected1 Int?
  selected2 Int?
  selected3 Int?
  selected4 Int?
  text1     String?
  text2     String?
  text3     String?
  text4     String?
  form      Form    @relation(fields: [fid], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [uid], references: [id], onDelete: Cascade)
  element   Element @relation(fields: [eid], references: [id], onDelete: Cascade)
}

model FormPermission {
  id   Int      @id @default(autoincrement())
  fid  Int
  uid  Int
  form Form     @relation(fields: [fid], references: [id], onDelete: Cascade)
  user User     @relation(fields: [uid], references: [id], onDelete: Cascade)
  role FormRole
}
